{"version":3,"sources":["img/search.svg","img/weather.jpg","Components/Location.js","Components/ParameterWeather.js","Components/TemperatureDetails.js","Components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Location","props","city","country","react_default","a","createElement","className","ParameterWeather","pollutionColor","style","width","value","legend","title","unit","TemperatureDetails","this","degrees","dangerouslySetInnerHTML","__html","degreesType","iconId","typeOfWeather","Components_ParameterWeather","wind","humidity","pollution","React","Component","Forecast","_this","forecastDays","forecast","map","forecastDay","i","day","key","maxIcon","max","minIcon","min","API_KEY","API_KEY_POLUTTION","API_ENDPOINT","API_FORECAST","API_POLUTTION","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSuggestions","_ref","query","rawAnswer","suggestion","suggestionsCity","suggestionIndex","name","normalize","replace","suggestionsCountry","setState","searchInputCity","searchInputCountry","getWeatherData","cityQuery","concat","state","forecastQuery","axios","get","then","response","cityResponse","data","degreesTemp","Math","round","main","temp","sys","weather","speed","id","forecastInfo","pollutionInfo","catch","error","pollutionQuery","pollutionResponse","current","aqius","forecastResponse","days","list","length","d","split","push","forecastArray","minTempForecast","maxTempForecast","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","time","dt_txt","weekDayName","moment","format","minTemp","temp_min","maxTemp","temp_max","forecastType","icon","err","return","minForecast","maxForecast","loaded","backgroundStyle","backgroundImage","htmlFor","type","onClick","es","src","searchImg","alt","dist_default","placeholder","options","appId","apiKey","language","onChange","Components_Location","Components_TemperatureDetails","Components_Forecast","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f779a0a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.2e4be4a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather.7999c328.jpg\";","import React from \"react\";\r\nconst Location = props => {\r\n  const { city, country } = props;\r\n  return (\r\n    <div className=\"Location\">\r\n      <h1 className=\"cityName\">\r\n        <span>{city}</span>,&nbsp;\r\n        <span>{country}</span>\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\nexport default Location;\r\n","import React from \"react\";\r\nconst ParameterWeather = props => {\r\n  let pollutionColor = \"\";\r\n  let style = { width: props.value + \"%\" };\r\n  let legend = \"\";\r\n  if (props.title === \"Pollution\") {\r\n    style.width = \"100%\";\r\n    if (props.value <= 50) {\r\n      pollutionColor = \"green\";\r\n    } else if (props.value <= 100) {\r\n      pollutionColor = \"yellow\";\r\n    } else if (props.value <= 150) {\r\n      pollutionColor = \"orange\";\r\n    } else if (props.value <= 200) {\r\n      pollutionColor = \"red\";\r\n    } else if (props.value <= 300) {\r\n      pollutionColor = \"purple\";\r\n    } else {\r\n      pollutionColor = \"burgundy\";\r\n    }\r\n    legend = \"tooltip\";\r\n  }\r\n\r\n  return (\r\n    <div className={\"parameter \" + legend}>\r\n      {props.title === \"Pollution\" ? (\r\n        <div className=\"tooltiptext\">\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color green\">Good</div>\r\n          </div>\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color yellow\">Moderate</div>\r\n          </div>\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color orange\">Unhealthy for sensitive groups</div>\r\n          </div>\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color red\">Unhealthy</div>\r\n          </div>\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color purple\">Very Unhealthy</div>\r\n          </div>\r\n          <div className=\"AQILegend\">\r\n            <div className=\"color burgundy\">Hazardous</div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n\r\n      <p className=\"parameterTitle\"> {props.title} </p>\r\n\r\n      <div className=\"progressBar\">\r\n        <div className=\"progressText\">\r\n          <span> {props.value}</span>\r\n          {props.unit}\r\n        </div>\r\n\r\n        <div className={\"progress \" + pollutionColor} style={style} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParameterWeather;\r\n","import React from \"react\";\r\nimport ParameterWeather from \"./ParameterWeather\";\r\n\r\nclass TemperatureDetails extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TemperatureDetails\">\r\n        <div className=\"leftSide\">\r\n          <span className=\"degreesTempDetails\">{this.props.degrees}</span>\r\n          <span\r\n            className=\"symbol\"\r\n            //xss- vulnerablity problem; escaping method\r\n            dangerouslySetInnerHTML={{ __html: this.props.degreesType }}\r\n          />\r\n          <br />\r\n          <div className=\"typeOfWeatherLeftSide\">\r\n            <i className={\"iconType wi wi-owm-\" + this.props.iconId} />\r\n\r\n            <span className=\"weatherTypeTempDet\">\r\n              {this.props.typeOfWeather}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"verticalLine\" />\r\n        <div className=\"rightSide\">\r\n          <ParameterWeather\r\n            title=\"Wind\"\r\n            value={this.props.wind}\r\n            unit=\"&nbsp;km/h\"\r\n          />\r\n\r\n          <ParameterWeather\r\n            title=\"Humidity\"\r\n            value={this.props.humidity}\r\n            unit=\"%\"\r\n          />\r\n          <span className=\"tooltiptext\" />\r\n\r\n          <ParameterWeather\r\n            title=\"Pollution\"\r\n            value={this.props.pollution}\r\n            unit=\"&nbsp;AQI\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TemperatureDetails;\r\n","import React from \"react\";\r\n\r\nclass Forecast extends React.Component {\r\n  render() {\r\n    const forecastDays = this.props.forecast.map((forecastDay, i) => {\r\n      if (i === 0) {\r\n        forecastDay.day = \"Today\";\r\n      }\r\n      return (\r\n        <li key={i}>\r\n          <p className=\"day\">{forecastDay.day}</p>\r\n          <div className=\"maxForecast\">\r\n            <i className={\"wi wi-owm-\" + forecastDay.maxIcon} />\r\n\r\n            <p className=\"degreesForecast\">\r\n              {forecastDay.max}\r\n\r\n              <span\r\n                dangerouslySetInnerHTML={{ __html: this.props.degreesType }}\r\n              />\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"minForecast\">\r\n            <i className={\"wi wi-owm-\" + forecastDay.minIcon} />\r\n\r\n            <p className=\"degreesForecast\">\r\n              {forecastDay.min}\r\n              <span\r\n                dangerouslySetInnerHTML={{ __html: this.props.degreesType }}\r\n              />\r\n            </p>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"Forecast\">\r\n        <ul className=\"forecastNextDays\">{forecastDays}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Location from \"./Components/Location\";\nimport TemperatureDetails from \"./Components/TemperatureDetails\";\nimport Forecast from \"./Components/Forecast\";\nimport backgroundImage from \"./img/weather.jpg\";\nimport searchImg from \"./img/search.svg\";\nimport SVG from \"react-inlinesvg\";\nimport moment from \"moment\";\nimport AlgoliaPlaces from \"algolia-places-react\";\n\nconst API_KEY = \"d39775e63bedbdcf56edd5ac4e6f3b18\";\nconst API_KEY_POLUTTION = \"vnrQAQH9C7xQwr8yb\";\nconst API_KEY_SUGGESTIONS_ID = \"plLALE39MUCT\";\nconst API_KEY_SUGGESTIONS_CODE = \"6c87ecde8efadc5b1a37784201009716\";\nconst API_ENDPOINT = \"https://api.openweathermap.org/data/2.5/weather\";\nconst API_FORECAST = \"https://api.openweathermap.org/data/2.5/forecast\";\nconst API_POLUTTION = \"https://cors.io/?http://api.airvisual.com/v2/\";\n\nclass App extends Component {\n \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputCity: \"\",\n      searchInputCountry: \"\",\n      city: \"\",\n      country: \"\",\n      degrees: \"\",\n      degreesType: \"C\",\n      iconId: \"\",\n      typeOfWeather: \"\",\n      wind: \"\",\n      humidity: \"\",\n      pollution: \"\",\n      forecast: [],\n      loaded: false\n    };\n  }\n\n\n  onSuggestions = ({ query, rawAnswer, suggestion, suggestionIndex }) => {\n    let suggestionsCity = suggestion.name;\n    suggestionsCity = suggestionsCity\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, \"\");\n    const suggestionsCountry = suggestion.country\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, \"\");\n    this.setState({\n      searchInputCity: suggestionsCity,\n      searchInputCountry: suggestionsCountry\n    });\n    this.getWeatherData();\n  };\n  getWeatherData = () => {\n    const cityQuery = `${API_ENDPOINT}?q=${this.state.searchInputCity},${\n      this.state.searchInputCountry\n    }&units=metric&appid=${API_KEY}`;\n    const forecastQuery = `${API_FORECAST}?q=${this.state.searchInputCity},${\n      this.state.searchInputCountry\n    }&units=metric&appid=${API_KEY}`;\n\n    axios\n      .get(cityQuery)\n      .then(response => {\n        const cityResponse = response.data;\n\n        const degreesTemp = Math.round(cityResponse.main.temp);\n        this.setState({\n          city: cityResponse.name,\n          country: cityResponse.sys.country,\n          typeOfWeather: cityResponse.weather[0].main,\n          degrees: degreesTemp,\n          wind: cityResponse.wind.speed,\n          humidity: cityResponse.main.humidity,\n          iconId: cityResponse.weather[0].id\n        });\n\n        this.forecastInfo(forecastQuery);\n        this.pollutionInfo();\n      })\n      .catch(error => {});\n  };\n\n  pollutionInfo = () => {\n    const pollutionQuery = `${API_POLUTTION}city?city=${\n      this.state.searchInputCity\n    }&state=${this.state.searchInputCity}&country=${\n      this.state.searchInputCountry\n    }&key=${API_KEY_POLUTTION}`;\n    axios.get(pollutionQuery).then(response => {\n      const pollutionResponse = response.data;\n      this.setState({\n        pollution: pollutionResponse.data.current.pollution.aqius\n      });\n    });\n  };\n\n  forecastInfo = forecastQuery => {\n    axios.get(forecastQuery).then(response => {\n      const forecastResponse = response.data;\n      this.setState({});\n      let days = {};\n      for (var i = 0; i < forecastResponse.list.length; i++) {\n        var d = forecastResponse.list[i][\"dt_txt\"].split(\" \")[0];\n        if (!days[d]) days[d] = [];\n        days[d].push(forecastResponse.list[i]);\n      }\n\n      let forecastArray = [];\n\n      for (let i in days) {\n        let minTempForecast = { min: \"\" };\n        let maxTempForecast = { max: \"\" };\n\n        for (let data of days[i]) {\n          const time = data.dt_txt;\n          const weekDayName = moment(time).format(\"dddd\");\n          const minTemp = data.main.temp_min;\n          const maxTemp = data.main.temp_max;\n          const iconId = data.weather[0].id;\n          const forecastType = data.weather[0].main;\n\n          if (minTempForecast.min === \"\" || minTemp < minTempForecast.min) {\n            minTempForecast = {\n              day: weekDayName,\n              min: minTemp,\n              forecast: forecastType,\n              icon: iconId\n            };\n          }\n          if (maxTempForecast.max === \"\" || maxTemp > maxTempForecast.max) {\n            maxTempForecast = {\n              day: weekDayName,\n              max: maxTemp,\n              forecast: forecastType,\n              icon: iconId\n            };\n          }\n        }\n\n        forecastArray.push({\n          day: maxTempForecast.day,\n          min: Math.round(minTempForecast.min),\n          max: Math.round(maxTempForecast.max),\n          minForecast: minTempForecast.forecast,\n          maxForecast: maxTempForecast.forecast,\n          minIcon: minTempForecast.icon,\n          maxIcon: maxTempForecast.icon\n        });\n\n       \n      }\n\n      this.setState({\n        forecast: forecastArray,\n        loaded: true\n      });\n    });\n  };\n\n  render() {\n    const degreesType = this.state.degreesType === \"C\" ? \"&deg;\" : \"&#8457\";\n    const backgroundStyle = {\n      backgroundImage: `url(\"${backgroundImage}\")`\n    };\n    return (\n      <div className=\"App\" style={backgroundStyle}>\n        <div className=\"backgroundFilter\">\n          <div className=\"Search\">\n            <label htmlFor=\"searchBar\">\n              <button\n                type=\"submit\"\n                className=\"searchButton\"\n                onClick={this.getWeatherData}\n              >\n                <SVG className=\"searchSVG\" src={searchImg}>\n                  <img src={searchImg} alt=\"icon\" />\n                </SVG>\n              </button>\n\n              <AlgoliaPlaces\n                placeholder=\"Search your location\"\n                options={{\n                  appId: API_KEY_SUGGESTIONS_ID,\n                  apiKey: API_KEY_SUGGESTIONS_CODE,\n                  language: \"en\",\n                  type: \"city\"\n                }}\n                onChange={this.onSuggestions}\n              />\n            </label>\n          </div>\n          {this.state.loaded ? (\n            <div>\n              <Location city={this.state.city} country={this.state.country} />\n              <TemperatureDetails\n                degrees={this.state.degrees}\n                degreesType={degreesType}\n                iconId={this.state.iconId}\n                typeOfWeather={this.state.typeOfWeather}\n                wind={this.state.wind}\n                humidity={this.state.humidity}\n                pollution={this.state.pollution}\n              />\n              <Forecast\n                forecast={this.state.forecast}\n                degreesType={degreesType}\n              />\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}